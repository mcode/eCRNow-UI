[{"/Users/bobd/projects/eCRNow-UI/src/index.js":"1","/Users/bobd/projects/eCRNow-UI/src/App.js":"2","/Users/bobd/projects/eCRNow-UI/src/serviceWorker.js":"3","/Users/bobd/projects/eCRNow-UI/src/Views/HealthCareSettings/HealthCareSettings.js":"4","/Users/bobd/projects/eCRNow-UI/src/Layout/Header/Header.js":"5","/Users/bobd/projects/eCRNow-UI/src/Views/KAR/KAR.js":"6","/Users/bobd/projects/eCRNow-UI/src/Views/Authorizations/Authorizations.js":"7","/Users/bobd/projects/eCRNow-UI/src/Views/ClientDetailsList/ClientDetailsList.js":"8","/Users/bobd/projects/eCRNow-UI/src/Views/HealthCareSettingsList/HealthCareSettingsList.js":"9","/Users/bobd/projects/eCRNow-UI/src/Views/ClientDetails/ClientDetails.js":"10","/Users/bobd/projects/eCRNow-UI/src/Views/PublicHealthAuthority/PublicHealthAuthority.js":"11"},{"size":452,"mtime":1641852235481,"results":"12","hashOfConfig":"13"},{"size":4204,"mtime":1643754650932,"results":"14","hashOfConfig":"13"},{"size":4951,"mtime":1641852235481,"results":"15","hashOfConfig":"13"},{"size":63536,"mtime":1643841065105,"results":"16","hashOfConfig":"13"},{"size":1143,"mtime":1641852235476,"results":"17","hashOfConfig":"13"},{"size":11788,"mtime":1643754650717,"results":"18","hashOfConfig":"13"},{"size":15350,"mtime":1643841374369,"results":"19","hashOfConfig":"13"},{"size":4591,"mtime":1641852235478,"results":"20","hashOfConfig":"13"},{"size":4730,"mtime":1641852235479,"results":"21","hashOfConfig":"13"},{"size":51632,"mtime":1643754650713,"results":"22","hashOfConfig":"13"},{"size":20536,"mtime":1643754909177,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1dtjow1",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"26"},"/Users/bobd/projects/eCRNow-UI/src/index.js",[],["50","51"],"/Users/bobd/projects/eCRNow-UI/src/App.js",[],"/Users/bobd/projects/eCRNow-UI/src/serviceWorker.js",[],"/Users/bobd/projects/eCRNow-UI/src/Views/HealthCareSettings/HealthCareSettings.js",["52","53","54","55","56","57"],"import React, { Component } from 'react';\nimport {\n    Alert,\n    Row,\n    Col,\n    Form, Card, Accordion, Button,Table\n} from 'react-bootstrap';\nimport './HealthCareSettings.css';\nimport { store } from 'react-notifications-component';\nimport TextField from '@material-ui/core/TextField/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nclass HealthCareSettings extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            validated: false,\n            isValidated:false,\n            isChecked: false,\n            karFhirServerURLList:[],\n            karsByHsIdList:[],\n            isKarFhirServerURLSelected:false,\n            selectedKARDetails:[],\n            outputFormats:[\"FHIR\",\"CDA_R11\",\"CDA_R30\",\"Both\"],\n            hsKARStatus:[]\n        };\n        this.selectedHealthCareSettings = this.props.selectedHealthCareSettings;\n        console.log(this.props.addNewHealthCare);\n        const propType = typeof this.props.addNewHealthCare;\n        if(propType === \"boolean\"){\n            this.addNewHealthCare = this.props.addNewHealthCare ? this.props.addNewHealthCare : false;\n        } else {\n            this.addNewHealthCare = this.props.addNewHealthCare ? this.props.addNewHealthCare.addNewHealthCare : false;\n        }\n        \n        console.log(this.addNewHealthCare);\n        console.log(this.selectedHealthCareSettings);\n        if (!this.addNewHealthCare && !this.isEmpty(this.selectedHealthCareSettings)) {\n          console.log(\"Inside If\");\n            if (this.selectedHealthCareSettings.authType === 'SofProvider') {\n                this.state.authType = this.selectedHealthCareSettings.authType;\n                this.state.clientId = this.selectedHealthCareSettings.clientId;\n            }\n            if (this.selectedHealthCareSettings.authType === 'SofSystem') {\n                this.state.authType = this.selectedHealthCareSettings.authType;\n                this.state.clientId = this.selectedHealthCareSettings.clientId;\n                this.state.clientSecret = this.selectedHealthCareSettings.clientSecret;\n            }\n            if (this.selectedHealthCareSettings.authType === 'userAccountLaunch') {\n                this.state.authType = this.selectedHealthCareSettings.authType;\n                this.state.username = this.selectedHealthCareSettings.clientId;\n                this.state.password = this.selectedHealthCareSettings.clientSecret;\n            }\n            if (this.selectedHealthCareSettings.isDirect) {\n                this.state.directType = 'direct';\n            }\n            if (this.selectedHealthCareSettings.isXdr) {\n                this.state.directType = 'xdr';\n            }\n            if (this.selectedHealthCareSettings.isRestAPI) {\n                this.state.directType = 'restApi';\n            }\n            \n            this.state.clientId = this.selectedHealthCareSettings.clientId;\n            this.state.clientSecret = this.selectedHealthCareSettings.clientSecret;\n            this.state.fhirServerBaseURL = this.selectedHealthCareSettings.fhirServerBaseURL;\n            this.state.tokenEndpoint = this.selectedHealthCareSettings.tokenUrl;\n            this.state.scopes = this.selectedHealthCareSettings.scopes;\n            this.state.directHost = this.selectedHealthCareSettings.directHost;\n            this.state.directUserName = this.selectedHealthCareSettings.directUser;\n            this.state.directPwd = this.selectedHealthCareSettings.directPwd;\n            this.state.directRecipientAddress = this.selectedHealthCareSettings.directRecipientAddress;\n            this.state.smtpPort = this.selectedHealthCareSettings.smtpPort;\n            this.state.imapPort = this.selectedHealthCareSettings.imapPort;\n            this.state.restApiUrl= this.selectedHealthCareSettings.restApiUrl;\n            this.state.assigningAuthorityId = this.selectedHealthCareSettings.assigningAuthorityId;\n            this.state.startThreshold = this.selectedHealthCareSettings.encounterStartThreshold;\n            this.state.endThreshold = this.selectedHealthCareSettings.encounterEndThreshold;\n\n            this.state.subscriptionsEnabled = this.selectedHealthCareSettings.subscriptionsEnabled;\n            this.state.trustedThirdParty = this.selectedHealthCareSettings.trustedThirdParty;\n            this.state.orgName = this.selectedHealthCareSettings.orgName;\n            this.state.orgIdSystem = this.selectedHealthCareSettings.orgIdSystem;\n            this.state.orgId = this.selectedHealthCareSettings.orgId;\n            this.getKARs();\n            this.getKARSByHsId(this.selectedHealthCareSettings.id);\n        } else {\n            this.state.authType = 'SofProvider';\n            this.state.directType = 'direct';\n        }\n        this.state.isSaved = false;\n        this.saveHealthCareSettings = this.saveHealthCareSettings.bind(this);\n        // this.saveKARSWithHealthCareSettings = this.saveKARSWithHealthCareSettings(this);\n        this.handleRadioChange = this.handleRadioChange.bind(this);\n        this.handleDirectChange = this.handleDirectChange.bind(this);\n        this.handleReportChange = this.handleReportChange.bind(this);\n        this.openHealthCareSettingsList = this.openHealthCareSettingsList.bind(this);\n        this.openKAR = this.openKAR.bind(this);\n    }\n\n    getKARs(){\n        console.log(\"clicked\");\n        fetch(process.env.REACT_APP_ECR_BASE_URL + \"/api/kars/\", {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(response => {\n                if (response.status === 200) {\n                    return response.json();\n                } else {\n                    const errorMessage = response.json();\n                    console.log(errorMessage);\n                    store.addNotification({\n                        title: '' + response.status + '',\n                        message: 'Error in fetching the KARs',\n                        type: 'danger',\n                        insert: 'bottom',\n                        container: 'bottom-right',\n                        animationIn: ['animated', 'fadeIn'],\n                        animationOut: ['animated', 'fadeOut'],\n                        dismiss: {\n                            duration: 5000,\n                            click: true,\n                            onScreen: true\n                        }\n                    });\n                    return;\n                }\n            })\n            .then(result => {\n                console.log(result);\n                if (result) {\n                    console.log(result);\n                    this.setState({\n                        karFhirServerURLList:result\n                    })\n                }\n\n            });\n    }\n\n    getKARSByHsId(hsId){\n        console.log(\"clicked\");\n        fetch(process.env.REACT_APP_ECR_BASE_URL + \"/api/karStatusByHsId?hsId=\"+hsId, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(response => {\n                if (response.status === 200) {\n                    return response.json();\n                } else {\n                    const errorMessage = response.json();\n                    console.log(errorMessage);\n                    store.addNotification({\n                        title: '' + response.status + '',\n                        message: 'Error in fetching the KARs By HsId',\n                        type: 'danger',\n                        insert: 'bottom',\n                        container: 'bottom-right',\n                        animationIn: ['animated', 'fadeIn'],\n                        animationOut: ['animated', 'fadeOut'],\n                        dismiss: {\n                            duration: 5000,\n                            click: true,\n                            onScreen: true\n                        }\n                    });\n                    return;\n                }\n            })\n            .then(result => {\n                if (result) {\n                    console.log(result);\n                    this.setState({\n                        karsByHsIdList:result\n                    })\n                }\n\n            });\n    }\n\n    isEmpty(obj) {\n        for (var key in obj) {\n            if (obj.hasOwnProperty(key))\n                return false;\n        }\n        return true;\n    }\n\n    handleChange(e) {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    }\n\n    handleRadioChange(e) {\n        if(e.target.value === \"userAccountLaunch\"){\n            this.setState({\n                clientId:''\n            })\n        }\n        if(e.target.value === \"SofProvider\" || e.target.value === \"SofSystem\"){\n            this.setState({\n                username:'',\n                password:''\n            })\n        }\n        this.setState({\n            authType: e.target.value\n        });\n    }\n\n    handleDirectChange(e) {\n        console.log(e.target.value);\n        this.setState({\n            directType: e.target.value\n        });\n    }\n    handleReportChange(e) {\n        this.setState({\n            reportType: e.target.value\n        });\n    }\n\n    async handleKARChange(e){\n        console.log(this.state.karsByHsIdList);\n        const karsByHsIdList = this.state.karsByHsIdList;\n        console.log(this.state.karFhirServerURLList)\n        console.log(e.target.value);\n        let kARDetails = this.state.karFhirServerURLList.filter(x=> {\n            return x.id== e.target.value;\n        });\n        const karInfoList = kARDetails[0].karsInfo;\n        karInfoList.sort(function(a, b) { \n            return b.id - a.id;\n          });\n        for(var i=0; i<karsByHsIdList.length; i++){\n            const versionAndKarIdArr = karsByHsIdList[i].versionUniqueKarId.split(\"|\");\n            console.log(versionAndKarIdArr[0]);\n            console.log(versionAndKarIdArr[1]);\n            karInfoList.filter(x=>{\n                if(x.karId === versionAndKarIdArr[0] && x.karVersion === versionAndKarIdArr[1]){\n                    x['isActive'] = karsByHsIdList[i].isActive;\n                    x['subscriptionsEnabled'] = karsByHsIdList[i].subscriptionsEnabled;\n                    x['covidOnly'] = karsByHsIdList[i].covidOnly;\n                    x['outputFormat'] = karsByHsIdList[i].outputFormat;\n                }\n            })\n        }\n        console.log(karInfoList);\n        await this.setState({\n             karFhirServerURL: e.target.value,\n             isKarFhirServerURLSelected: true,\n             selectedKARDetails: karInfoList\n        })\n        \n        console.log(this.state.selectedKARDetails);\n    }\n\n    handleOutputFormatChange(e,rowData){\n        console.log(e.target.value);\n        console.log(rowData);\n        rowData['outputFormat'] = e.target.value;\n        rowData['isChanged'] = true;\n    }\n\n    handleToggleButton(e) {\n        console.log(e);\n        console.log(e.target.value);\n        if (this.state.isChecked) {\n            this.setState({ isChecked: false, isLoggingEnabled: false });\n        } else {\n            this.setState({ isChecked: true, isLoggingEnabled: true });\n        }\n        console.log(this.state);\n    }\n\n    handleCheckboxChange(e,rowData,columnType){\n        console.log(e.target.checked);\n        console.log(rowData);\n        console.log(columnType);\n        if(columnType === \"Activation\"){\n            rowData['isActive'] = e.target.checked;\n            rowData['isChanged'] = true;\n        } \n        if(columnType === \"EnableSubscriptions\"){\n            rowData['subscriptionsEnabled'] = e.target.checked;\n            rowData['isChanged'] = true;\n        }\n        if(columnType === \"EnableCovidReporting\"){\n            rowData['covidOnly'] = e.target.checked;\n            rowData['isChanged'] = true;\n        }\n        console.log(rowData);\n        this.state.selectedKARDetails.filter(x=>{\n            if(x.id === rowData.id && rowData.isChanged){\n                x = rowData;\n            }\n        })\n        this.setState({\n            selectedKARDetails:[ ...this.state.selectedKARDetails ]\n        })\n    }\n\n    openHealthCareSettingsList() {\n        this.props.history.push('healthCareSettingsList');\n    }\n    openKAR(){\n        this.props.history.push('kar');\n    }\n\n    geturl() {\n        var protocol, context, host, strurl;\n        protocol = window.location.protocol;\n        host = window.location.host;\n        //port = window.location.port;\n        context = window.location.pathname.substring(0, window.location.pathname.indexOf(\"/\", 2));\n        strurl = protocol + \"//\" + host + context;\n        return strurl;\n    };\n\n    saveHealthCareSettings() {\n        console.log(\"clicked\");\n        console.log(this.selectedHealthCareSettings);\n        console.log(this.state.xdrRecipientAddress);\n        var requestMethod = '';\n        var healthCareSettings = {\n            authType: this.state.authType,\n            clientId: this.state.authType === \"userAccountLaunch\"?this.state.username:this.state.clientId,\n            isDirect: this.state.directType === \"direct\" ? true : false,\n            isXdr: this.state.directType === \"xdr\" ? true : false,\n            isRestAPI: this.state.directType === \"restApi\" ? true : false,\n            clientSecret: this.state.clientSecret && this.state.authType === 'SofSystem'  ? this.state.clientSecret : this.state.password,\n            fhirServerBaseURL: this.state.fhirServerBaseURL,\n            tokenUrl: this.state.tokenEndpoint ? this.state.tokenEndpoint : null,\n            scopes: this.state.scopes,\n            directHost: this.state.directHost && this.state.directType === \"direct\" ? this.state.directHost : null,\n            directUser: this.state.directUserName && this.state.directType === \"direct\" ? this.state.directUserName : null,\n            directPwd: this.state.directPwd && this.state.directType === \"direct\" ? this.state.directPwd : null,\n            smtpPort: this.state.smtpPort && this.state.directType === \"direct\" ? this.state.smtpPort : null,\n            imapPort: this.state.imapPort && this.state.directType === \"direct\" ? this.state.imapPort : null,\n            directRecipientAddress: this.state.directRecipientAddress && this.state.directType === \"direct\" ? this.state.directRecipientAddress : null,\n            xdrRecipientAddress: this.state.xdrRecipientAddress && this.state.directType === \"xdr\" ? this.state.xdrRecipientAddress : null,\n            restApiUrl: this.state.restApiUrl && this.state.directType === \"restApi\" ? this.state.restApiUrl : null,\n            assigningAuthorityId : this.state.assigningAuthorityId?this.state.assigningAuthorityId:null,\n            encounterStartThreshold: this.state.startThreshold,\n            encounterEndThreshold: this.state.endThreshold,\n            subscriptionsEnabled: this.state.SubscriptionsEnabled,\n            trustedThirdParty: this.state.trustedThirdParty,\n            orgName: this.state.orgName ? this.state.orgName : null,\n            orgIdSystem: this.state.orgIdSystem,\n            orgId: this.state.orgId,\n            lastUpdated:new Date()\n        };\n        if (!this.addNewHealthCare && this.selectedHealthCareSettings) {\n          healthCareSettings['id'] = this.selectedHealthCareSettings.id;\n            requestMethod = 'PUT';\n        } else {\n            requestMethod = 'POST';\n        }\n        console.log(this.geturl());\n        console.log(JSON.stringify(healthCareSettings));\n        \n        // var serviceURL = this.geturl();\n        fetch(process.env.REACT_APP_ECR_BASE_URL + \"/api/healthcareSettings\", {\n            method: requestMethod,\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(healthCareSettings)\n        })\n            .then(response => {\n                if (response.status === 200) {\n                    this.setState({\n                        isSaved: true\n                    });\n                    return response.json();\n                } else {\n                    const errorMessage = response.json();\n                    console.log(errorMessage);\n                    store.addNotification({\n                        title: '' + response.status + '',\n                        message: 'Error in Saving the HealthCare Settings',\n                        type: 'danger',\n                        insert: 'bottom',\n                        container: 'bottom-right',\n                        animationIn: ['animated', 'fadeIn'],\n                        animationOut: ['animated', 'fadeOut'],\n                        dismiss: {\n                            duration: 5000,\n                            click: true,\n                            onScreen: true\n                        }\n                    });\n                    return;\n                }\n            })\n            .then(result => {\n                console.log(result);\n                if (result) {\n                    this.setState({\n                        authType: \"SofProvider\",\n                        clientId: \"\",\n                        clientSecret: \"\",\n                        fhirServerBaseURL: \"\",\n                        tokenEndpoint: \"\",\n                        scopes: \"\",\n                        startThreshold: \"\",\n                        endThreshold: \"\",\n                        restApiUrl: \"\"\n                    });\n                    store.addNotification({\n                        title: 'Success',\n                        message: 'HealthCare Settings are saved successfully.',\n                        type: 'success',\n                        insert: 'bottom',\n                        container: 'bottom-right',\n                        animationIn: ['animated', 'fadeIn'],\n                        animationOut: ['animated', 'fadeOut'],\n                        dismiss: {\n                            duration: 5000,\n                            click: true,\n                            onScreen: true\n                        }\n                    });\n                    this.saveKARSWithHealthCareSettings(this.selectedHealthCareSettings);\n                    \n                }\n\n            });\n    }\n\n    saveKARSWithHealthCareSettings(hcs) {\n        console.log(this.state.selectedKARDetails);\n        const kars =  this.state.selectedKARDetails;\n        const updatedRows = kars.filter(x=>{\n            return x.isChanged === true;\n        });\n        const hsKARStatus = [];\n        for(var i=0; i<updatedRows.length; i++){\n            const karWithHsObj = {\n                hsId : this.selectedHealthCareSettings.id,\n                karId : updatedRows[i].karId,\n                karVersion : updatedRows[i].karVersion,\n                versionUniqueKarId : updatedRows[i].karId + \"|\" + updatedRows[i].karVersion,\n                isActive : updatedRows[i].isActive?updatedRows[i].isActive:false,\n                subscriptionsEnabled : updatedRows[i].subscriptionsEnabled?updatedRows[i].subscriptionsEnabled:false,\n                covidOnly: updatedRows[i].covidOnly?updatedRows[i].covidOnly:false,\n                // directHost: hcs.directHost,\n                // directUser: hcs.directUser,\n                // directPwd: hcs.directPwd,\n                // smtpPort: hcs.smtpPort,\n                // imapPort: hcs.imapPort,\n                // directRecipientAddress: hcs.directRecipientAddress,\n                // xdrRecipientAddress: hcs.xdrRecipientAddress,\n                // restApiUrl: hcs.restApiUrl,\n                // assigningAuthorityId:hcs.assigningAuthorityId,\n                // encounterStartThreshold:hcs.encounterStartThreshold,\n                // encounterEndThreshold:hcs.encounterEndThreshold,\n                outputFormat : updatedRows[i].outputFormat\n            }\n            hsKARStatus.push(karWithHsObj);\n        }\n        fetch(process.env.REACT_APP_ECR_BASE_URL + \"/api/addKARStatus/\", {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(hsKARStatus)\n        })\n            .then(response => {\n                if (response.status === 200) {\n                    this.setState({\n                        isSaved: true\n                    });\n                    return response.json();\n                } else {\n                    const errorMessage = response.json();\n                    console.log(errorMessage);\n                    store.addNotification({\n                        title: '' + response.status + '',\n                        message: 'Error in Saving the Knowledge Artifacts Status',\n                        type: 'danger',\n                        insert: 'bottom',\n                        container: 'bottom-right',\n                        animationIn: ['animated', 'fadeIn'],\n                        animationOut: ['animated', 'fadeOut'],\n                        dismiss: {\n                            duration: 5000,\n                            click: true,\n                            onScreen: true\n                        }\n                    });\n                    return;\n                }\n            })\n            .then(result => {\n                console.log(result);\n                this.openHealthCareSettingsList();\n            });\n    }\n\n    render() {\n        const setShow = () => this.setState({ isSaved: false });\n\n        const handleSubmit = (event) => {\n            const form = event.currentTarget;\n            if (form.checkValidity() === false) {\n                this.setState({\n                    isValidated: true\n                });\n                event.preventDefault();\n                event.stopPropagation();\n                store.addNotification({\n                    title: 'Warning',\n                    message: 'Please enter all the required fields.',\n                    type: 'warning',\n                    insert: 'bottom',\n                    container: 'bottom-right',\n                    animationIn: ['animated', 'fadeIn'],\n                    animationOut: ['animated', 'fadeOut'],\n                    dismiss: {\n                        duration: 5000,\n                        click: true,\n                        onScreen: true\n                    }\n                });\n                return;\n            }\n            if (form.checkValidity() === true) {\n                this.saveHealthCareSettings();\n                this.setState({\n                    validated: true\n                });\n                event.preventDefault();\n                event.stopPropagation();\n            }\n\n        };\n        return (\n            <div className=\"healthCareSettings\">\n                <br />\n                <Row>\n                    <Col md=\"6\">\n                        <h2>HealthCare Settings</h2>\n                    </Col>\n                    <Col md=\"3\" className=\"clientCol\">\n                        <Button onClick={this.openHealthCareSettingsList}>Existing HealthCareSettings</Button>\n                    </Col>\n                    <Col md=\"3\" className=\"clientCol\">\n                        <Button onClick={this.openKAR}>eCR Specifications/KAR</Button>\n                    </Col>\n                </Row>\n                <hr />\n                <Row>\n                    <Col>\n                        <Alert\n                            variant=\"success\"\n                            show={this.state.isSaved}\n                            onClose={() => setShow()}\n                            dismissible\n                        >\n                            HealthCare Settings are saved successfully.\n        </Alert>\n                        <Form noValidate validated={this.state.validated} onSubmit={handleSubmit} >\n                            <Accordion defaultActiveKey=\"0\">\n                                <Card className=\"accordionCards\">\n                                    <Accordion.Toggle as={Card.Header} eventKey=\"0\">\n                                        FHIR Configuration\n                                    </Accordion.Toggle>\n                                    <Accordion.Collapse eventKey=\"0\">\n                                        <Card.Body className=\"fhirConfiguration\">\n                                            <Form.Group as={Row} controlId=\"formHorizontalClientId\">\n                                                <Form.Label column sm={2}>\n                                                    Launch Type:\n                                                </Form.Label>\n                                                <Col sm={10}>\n                                                    <Row>\n                                                        <Col sm={4}>\n                                                            <Form.Check type=\"radio\" id=\"providerLaunch\">\n                                                                <Form.Check.Input type=\"radio\" checked={this.state.authType === 'SofProvider'} value=\"SofProvider\" name=\"authType\" onChange={e => this.handleRadioChange(e)} />\n                                                                <Form.Check.Label>Provider Launch</Form.Check.Label>\n                                                            </Form.Check>\n                                                        </Col>\n                                                        <Col sm={4}>\n                                                            <Form.Check type=\"radio\" id=\"systemLaunch\">\n                                                                <Form.Check.Input type=\"radio\" checked={this.state.authType === 'SofSystem'} value=\"SofSystem\" onChange={e => this.handleRadioChange(e)} />\n                                                                <Form.Check.Label>System Launch</Form.Check.Label>\n                                                            </Form.Check>\n                                                        </Col>\n                                                        <Col sm={4}>\n                                                            <Form.Check type=\"radio\" id=\"userAccountLaunch\">\n                                                                <Form.Check.Input type=\"radio\" checked={this.state.authType === 'userAccountLaunch'} value=\"userAccountLaunch\" onChange={e => this.handleRadioChange(e)} />\n                                                                <Form.Check.Label>Username & Password</Form.Check.Label>\n                                                            </Form.Check>\n                                                        </Col>\n                                                    </Row>\n                                                </Col>\n                                            </Form.Group>\n                                            {this.state.authType === 'SofSystem' || this.state.authType === 'SofProvider' ? (\n                                            <Form.Group as={Row} controlId=\"formHorizontalClientId\">\n                                                <Form.Label column sm={2}>\n                                                    Client Id:\n                                                </Form.Label>\n                                                <Col sm={10}>\n                                                    <Form.Control type=\"text\" placeholder=\"ClientId\" name=\"clientId\" required onChange={e => this.handleChange(e)} value={this.state.clientId} isInvalid={this.state.isValidated && (this.state.clientId === '' || this.state.clientId === undefined)}/>\n                                                    <Form.Control.Feedback type=\"invalid\">\n                                                        Please provide a Client Id.\n                                                    </Form.Control.Feedback>\n                                                </Col>\n                                            </Form.Group>):(\n                                                <Form.Group as={Row} controlId=\"formHorizontalClientId\">\n                                                <Form.Label column sm={2}>\n                                                    Username:\n                                                </Form.Label>\n                                                <Col sm={10}>\n                                                    <Form.Control type=\"text\" placeholder=\"Username\" name=\"username\" required onChange={e => this.handleChange(e)} value={this.state.username} />\n                                                    <Form.Control.Feedback type=\"invalid\">\n                                                        Please provide a Username.\n                                                    </Form.Control.Feedback>\n                                                </Col>\n                                            </Form.Group>\n                                            )}\n\n                                            {this.state.authType === 'SofSystem' ? (\n                                                <Form.Group as={Row} controlId=\"formHorizontalClientSecret\">\n                                                    <Form.Label column sm={2}>\n                                                        Client Secret:\n                                                    </Form.Label>\n                                                    <Col sm={10}>\n                                                        <Form.Control type=\"text\" placeholder=\"Client Secret\" name=\"clientSecret\" required={this.state.launchType === 'systemLaunch' ? true : false} onChange={e => this.handleChange(e)} value={this.state.clientSecret} isInvalid={this.state.isValidated && (this.state.clientSecret === '' || this.state.clientSecret === undefined)}/>\n                                                        <Form.Control.Feedback type=\"invalid\">\n                                                            Please provide a Client Secret.\n                                                        </Form.Control.Feedback>\n                                                    </Col>\n                                                </Form.Group>\n                                            ) : ''}\n\n                                            {this.state.authType === 'userAccountLaunch' ? (\n                                                <Form.Group as={Row} controlId=\"formHorizontalClientSecret\">\n                                                    <Form.Label column sm={2}>\n                                                        Password:\n                                                    </Form.Label>\n                                                    <Col sm={10}>\n                                                        <Form.Control type=\"password\" placeholder=\"Password\" name=\"password\" required={this.state.launchType === 'userAccountLaunch' ? true : false} onChange={e => this.handleChange(e)} value={this.state.password} />\n                                                        <Form.Control.Feedback type=\"invalid\">\n                                                            Please provide a Password.\n                                                        </Form.Control.Feedback>\n                                                    </Col>\n                                                </Form.Group>\n                                            ) : ''}\n\n                                            <Form.Group as={Row} controlId=\"formHorizontalScopes\">\n                                                <Form.Label column sm={2}>\n                                                    Scopes:\n                                                </Form.Label>\n                                                <Col sm={10}>\n                                                    <Form.Control as=\"textarea\" rows=\"3\" name=\"scopes\" onChange={e => this.handleChange(e)} required value={this.state.scopes} isInvalid={this.state.isValidated && (this.state.scopes === '' || this.state.scopes === undefined)}/>\n                                                    <Form.Control.Feedback type=\"invalid\">\n                                                        Please provide Scopes.\n                                                    </Form.Control.Feedback>\n                                                </Col>\n                                            </Form.Group>\n\n                                            <Form.Group as={Row} controlId=\"formHorizontalFHIRBaseURL\">\n                                                <Form.Label column sm={2}>\n                                                    FHIR Server Base URL:\n                                                </Form.Label>\n                                                <Col sm={10}>\n                                                    <Form.Control type=\"text\" placeholder=\"FHIR Server Base URL\" name=\"fhirServerBaseURL\" required onChange={e => this.handleChange(e)} value={this.state.fhirServerBaseURL} isInvalid={this.state.isValidated && (this.state.fhirServerBaseURL === '' || this.state.fhirServerBaseURL === undefined)}/>\n                                                    <Form.Control.Feedback type=\"invalid\">\n                                                        Please provide a FHIR Server Base URL.\n                                                    </Form.Control.Feedback>\n                                                </Col>\n                                            </Form.Group>\n                                            <Form.Group as={Row} controlId=\"formHorizaontalSubscriptionsEnabled\">\n                                                <Form.Label column sm={2}>\n                                                    Subscriptions Enabled:\n                                                </Form.Label>\n                                                <Col sm={10}>\n                                                    <Row>\n                                                        <Col sm={4}>\n                                                            <Form.Check type=\"checkbox\" id=\"providerLaunch\">\n                                                                <Form.Check.Input type=\"checkbox\" value={this.state.subscriptionsEnabled} onChange={e => this.setState( (prevState) => {return {subscriptionsEnabled: !prevState.subscriptionsEnabled}})} />\n                                                            </Form.Check>\n                                                        </Col>\n                                                    </Row>\n                                                </Col>\n                                            </Form.Group>\n\n                                            <Form.Group as={Row} controlId=\"formHorizontalOrgName\">\n                                                        <Form.Label column sm={2}>\n                                                            Org Name:\n                                                        </Form.Label>\n                                                        <Col sm={10}>\n                                                            <Form.Control type=\"text\" placeholder=\"Organization Name\" name=\"orgName\" onChange={e => this.handleChange(e)} value={this.state.orgName || ''}/>\n                                                        </Col>\n                                            </Form.Group>\n                                            <Form.Group as={Row} controlId=\"formHorizontalOrgIdSystem\">\n                                                        <Form.Label column sm={2}>\n                                                            Org ID System:\n                                                        </Form.Label>\n                                                        <Col sm={10}>\n                                                            <Form.Control type=\"text\" placeholder=\"Organization ID System\" name=\"orgIdSystem\" onChange={e => this.handleChange(e)} value={this.state.orgIdSystem || ''}/>\n                                                        </Col>\n                                            </Form.Group>\n                                            <Form.Group as={Row} controlId=\"formHorizontalOrgId\">\n                                                        <Form.Label column sm={2}>\n                                                            Org ID:\n                                                        </Form.Label>\n                                                        <Col sm={10}>\n                                                            <Form.Control type=\"text\" placeholder=\"Organization ID\" name=\"orgId\" onChange={e => this.handleChange(e)} value={this.state.orgId || ''}/>\n                                                        </Col>\n                                            </Form.Group>\n                                            {this.state.authType === 'SofSystem' ? (\n                                                <Form.Group as={Row} controlId=\"formHorizontalTokenURL\">\n                                                    <Form.Label column sm={2}>\n                                                        Token Endpoint:\n                                                    </Form.Label>\n                                                    <Col sm={10}>\n                                                        <Form.Control type=\"text\" placeholder=\"Token Endpoint\" name=\"tokenEndpoint\"  onChange={e => this.handleChange(e)} value={this.state.tokenEndpoint} isInvalid={this.state.isValidated && (this.state.tokenEndpoint === '' || this.state.tokenEndpoint === undefined)}/>\n\n                                                        <Form.Control.Feedback type=\"invalid\">\n                                                            Please provide a FHIR Server Token URL.\n                                                        </Form.Control.Feedback>\n                                                    </Col>\n                                                </Form.Group>\n                                                ) : ''}\n                                        </Card.Body>\n                                    </Accordion.Collapse>\n                                </Card>\n\n                                <Card className=\"accordionCards\">\n                                    <Accordion.Toggle as={Card.Header} eventKey=\"1\">\n                                        Transport Configuration\n                                    </Accordion.Toggle>\n                                    <Accordion.Collapse eventKey=\"1\">\n                                        <Card.Body className=\"transportConfiguration\">\n                                        <Form.Group as={Row} controlId=\"formHorizontalClientId\">\n                                                <Form.Label column sm={2}>\n                                                    Direct Type:\n                                                </Form.Label>\n                                                <Col sm={10}>\n                                                    <Row>\n                                                        <Col sm={4}>\n                                                            <Form.Check type=\"radio\" id=\"direct\">\n                                                                <Form.Check.Input type=\"radio\" checked={this.state.directType === 'direct'} value=\"direct\" onChange={e => this.handleDirectChange(e)} />\n                                                                <Form.Check.Label>Direct</Form.Check.Label>\n                                                            </Form.Check>\n                                                        </Col>\n                                                        <Col sm={4}>\n                                                            <Form.Check type=\"radio\" id=\"xdr\">\n                                                                <Form.Check.Input type=\"radio\" checked={this.state.directType === 'xdr'} value=\"xdr\" onChange={e => this.handleDirectChange(e)} />\n                                                                <Form.Check.Label>XDR</Form.Check.Label>\n                                                            </Form.Check>\n                                                        </Col>\n                                                        <Col sm={4}>\n                                                            <Form.Check type=\"radio\" id=\"restApi\">\n                                                                <Form.Check.Input type=\"radio\" checked={this.state.directType === 'restApi'} value=\"restApi\" onChange={e => this.handleDirectChange(e)} />\n                                                                <Form.Check.Label>Rest API</Form.Check.Label>\n                                                            </Form.Check>\n                                                        </Col>\n                                                    </Row>\n                                                </Col>\n                                            </Form.Group>\n                                            {this.state.directType === 'direct' ? (\n                                                <div>\n                                                    <Form.Group as={Row} controlId=\"directHost\">\n                                                        <Form.Label column sm={2}>\n                                                            Direct Host:\n                                                        </Form.Label>\n                                                        <Col sm={10}>\n                                                            <Form.Control type=\"text\" placeholder=\"Direct Host\" name=\"directHost\" required={this.state.directType === 'direct' ? true : false} onChange={e => this.handleChange(e)} value={this.state.directHost} isInvalid={this.state.isValidated && (this.state.directHost === '' || this.state.directHost === undefined)}/>\n                                                            <Form.Control.Feedback type=\"invalid\">\n                                                                Please provide a Direct Host name.\n                                                            </Form.Control.Feedback>\n                                                        </Col>\n                                                    </Form.Group>\n\n\n                                                    <Form.Group as={Row} controlId=\"directUserName\">\n                                                        <Form.Label column sm={2}>\n                                                            Direct Sender User Name:\n                                                        </Form.Label>\n                                                        <Col sm={10}>\n                                                            <Form.Control type=\"text\" placeholder=\"Direct Sender User Name\" required={this.state.directType === 'direct' ? true : false} name=\"directUserName\" onChange={e => this.handleChange(e)} value={this.state.directUserName} isInvalid={this.state.isValidated && (this.state.directUserName === '' || this.state.directUserName === undefined)}/>\n                                                            <Form.Control.Feedback type=\"invalid\">\n                                                                Please provide a Direct Sender User Name.\n                                                            </Form.Control.Feedback>\n                                                        </Col>\n                                                    </Form.Group>\n\n                                                    <Form.Group as={Row} controlId=\"directPwd\">\n                                                        <Form.Label column sm={2}>\n                                                            Direct Sender Password:\n                                                        </Form.Label>\n                                                        <Col sm={10}>\n                                                            <Form.Control type=\"password\" name=\"directPwd\" placeholder=\"Direct Sender Password\" required={this.state.directType === 'direct' ? true : false} onChange={e => this.handleChange(e)} value={this.state.directPwd} isInvalid={this.state.isValidated && (this.state.directPwd === '' || this.state.directPwd === undefined)}/>\n                                                            <Form.Control.Feedback type=\"invalid\">\n                                                                Please provide a Direct Password.\n                                                            </Form.Control.Feedback>\n                                                        </Col>\n                                                    </Form.Group>\n\n                                                    <Form.Group as={Row} controlId=\"directRecipientAddress\">\n                                                        <Form.Label column sm={2}>\n                                                            Direct Recipient Address:\n                                                        </Form.Label>\n                                                        <Col sm={10}>\n                                                            <Form.Control type=\"text\" name=\"directRecipientAddress\" required={this.state.directType === 'direct' ? true : false} placeholder=\"Direct Receipient Address\" onChange={e => this.handleChange(e)} value={this.state.directRecipientAddress} isInvalid={this.state.isValidated && (this.state.directRecipientAddress === '' || this.state.directRecipientAddress === undefined)}/>\n                                                            <Form.Control.Feedback type=\"invalid\">\n                                                                Please provide a Direct Recipient Address.\n                                                            </Form.Control.Feedback>\n                                                        </Col>\n                                                    </Form.Group>\n                                                    <Form.Group as={Row} controlId=\"smtpPort\">\n                                                        <Form.Label column sm={2}>\n                                                            SMTP Port:\n                                                        </Form.Label>\n                                                        <Col sm={10}>\n                                                            <Form.Control type=\"text\" name=\"smtpPort\" required={this.state.directType === 'direct' ? true : false} placeholder=\"SMTP Port\" onChange={e => this.handleChange(e)} value={this.state.smtpPort} isInvalid={this.state.isValidated && (this.state.smtpPort === '' || this.state.smtpPort === undefined)}/>\n                                                            <Form.Control.Feedback type=\"invalid\">\n                                                                Please provide a SMTP Port.\n                                                            </Form.Control.Feedback>\n                                                        </Col>\n                                                    </Form.Group>\n                                                    <Form.Group as={Row} controlId=\"imapPort\">\n                                                        <Form.Label column sm={2}>\n                                                            IMAP Port:\n                                                        </Form.Label>\n                                                        <Col sm={10}>\n                                                            <Form.Control type=\"text\" name=\"imapPort\" required={this.state.directType === 'direct' ? true : false} placeholder=\"IMAP Port\" onChange={e => this.handleChange(e)} value={this.state.imapPort} isInvalid={this.state.isValidated && (this.state.imapPort === '' || this.state.imapPort === undefined)}/>\n                                                            <Form.Control.Feedback type=\"invalid\">\n                                                                Please provide a IMAP Port.\n                                                            </Form.Control.Feedback>\n                                                        </Col>\n                                                    </Form.Group>\n                                                </div>\n                                            ) : ''}\n\n                                            {this.state.directType === 'xdr' ? (\n                                                <div>\n                                                    <Form.Group as={Row} controlId=\"xdrRecipientAddress\">\n                                                        <Form.Label column sm={2}>\n                                                            XDR Recipient Address:\n                                                        </Form.Label>\n                                                        <Col sm={10}>\n                                                            <Form.Control type=\"text\" placeholder=\"XDR Recipient Address\" required={this.state.directType === 'xdr' ? true : false} name=\"xdrRecipientAddress\" onChange={e => this.handleChange(e)} value={this.state.xdrRecipientAddress} isInvalid={this.state.isValidated && (this.state.xdrRecipientAddress === '' || this.state.xdrRecipientAddress === undefined)}/>\n                                                            <Form.Control.Feedback type=\"invalid\">\n                                                                Please provide a XDR Recipient Address.\n                                                            </Form.Control.Feedback>\n                                                        </Col>\n                                                    </Form.Group>\n                                                </div>\n                                            ) : ''}\n\n                                            {this.state.directType === 'restApi' ? (\n                                                <div>\n                                                    <Form.Group as={Row} controlId=\"restApiUrl\">\n                                                        <Form.Label column sm={2}>\n                                                            Rest API URL:\n                                                        </Form.Label>\n                                                        <Col sm={10}>\n                                                            <Form.Control type=\"text\" placeholder=\"Rest API URL\" required={this.state.directType === 'restApi' ? true : false} name=\"restApiUrl\" onChange={e => this.handleChange(e)} value={this.state.restApiUrl} isInvalid={this.state.isValidated && (this.state.restApiUrl === '' || this.state.restApiUrl === undefined)}/>\n                                                            <Form.Control.Feedback type=\"invalid\">\n                                                                Please provide Rest API URL.\n                                                            </Form.Control.Feedback>\n                                                        </Col>\n                                                    </Form.Group>\n                                                    <Form.Group as={Row} controlId=\"formHorizontalTrustedThirdParty\">\n                                                        <Form.Label column sm={2}>\n                                                            Trusted Third Party URL:\n                                                        </Form.Label>\n                                                        <Col sm={10}>\n                                                            <Form.Control type=\"text\" placeholder=\"Trusted Third Party\" name=\"trustedThirdParty\" onChange={e => this.handleChange(e)} value={this.state.trustedThirdParty || ''}/>\n                                                        </Col>\n                                                    </Form.Group>\n                                                </div>\n                                            ) : ''}\n                                        </Card.Body>\n                                    </Accordion.Collapse>\n                                </Card>\n\n                                <Card className=\"accordionCards\">\n                                    <Accordion.Toggle as={Card.Header} eventKey=\"2\">\n                                        App Configuration\n                                    </Accordion.Toggle>\n                                    <Accordion.Collapse eventKey=\"2\">\n                                        <Card.Body className=\"appConfiguration\">\n\n                                            <Form.Group as={Row} controlId=\"assigningAuthorityId\">\n                                                <Form.Label column sm={2}>\n                                                    Assigning Authority Id:\n                                                </Form.Label>\n                                                <Col sm={10}>\n                                                    <Form.Control type=\"text\" placeholder=\"Assigning Authority Id\" required name=\"assigningAuthorityId\" onChange={e => this.handleChange(e)} value={this.state.assigningAuthorityId} isInvalid={this.state.isValidated && (this.state.assigningAuthorityId === '' || this.state.assigningAuthorityId === undefined)}/>\n                                                    <Form.Control.Feedback type=\"invalid\">\n                                                        Please provide a Assigning Authority Id.\n                                                    </Form.Control.Feedback>\n                                                </Col>\n                                            </Form.Group>\n\n                                            <Form.Group as={Row} controlId=\"startThreshold\">\n                                                <Form.Label column sm={2}>\n                                                    Encounter Start Time Threshold:\n                                                </Form.Label>\n                                                <Col sm={10}>\n                                                    <Form.Control type=\"text\" placeholder=\"Encounter Start Time Threshold\" required name=\"startThreshold\" onChange={e => this.handleChange(e)} value={this.state.startThreshold} isInvalid={this.state.isValidated && (this.state.startThreshold === '' || this.state.startThreshold === undefined)}/>\n                                                    <Form.Control.Feedback type=\"invalid\">\n                                                        Please provide a Encounter Start Time Threshold.\n                                                    </Form.Control.Feedback>\n                                                </Col>\n                                            </Form.Group>\n\n                                            <Form.Group as={Row} controlId=\"endThreshold\">\n                                                <Form.Label column sm={2}>\n                                                    Encounter End Time Threshold:\n                                                </Form.Label>\n                                                <Col sm={10}>\n                                                    <Form.Control type=\"text\" placeholder=\"Encounter End Time Threshold\" required name=\"endThreshold\" onChange={e => this.handleChange(e)} value={this.state.endThreshold} isInvalid={this.state.isValidated && (this.state.endThreshold === '' || this.state.endThreshold === undefined)}/>\n                                                    <Form.Control.Feedback type=\"invalid\">\n                                                        Please provide a Encounter End Time Threshold.\n                                                    </Form.Control.Feedback>\n                                                </Col>\n                                            </Form.Group>\n\n                                        </Card.Body>\n                                    </Accordion.Collapse>\n                                </Card>\n                            \n                                {!this.addNewHealthCare?(\n                                <Card className=\"accordionCards\">\n                                    <Accordion.Toggle as={Card.Header} eventKey=\"3\">\n                                        eCR Specifications/KAR Configuration\n                                    </Accordion.Toggle>\n                                    <Accordion.Collapse eventKey=\"3\">\n                                        <Card.Body className=\"appConfiguration\">\n\n                                        <Form.Group as={Row} controlId=\"fhirServerURLPickList\">\n                                            <Form.Label column lg=\"3\">\n                                                Select FHIR Server URL:\n                                            </Form.Label>\n                                            <Col lg=\"9\">\n                                            <Form.Control as=\"select\" defaultValue=\"Select FHIR Server URL\" onChange={e=>this.handleKARChange(e)}>\n                                                <option>Select FHIR Server URL</option>\n                                                {this.state.karFhirServerURLList.map(option => (\n                                                    <option key={option.id} value={option.id}>\n                                                    {option.repoName +\" - \"+option.fhirServerURL}\n                                                    </option>\n                                                ))}\n                                            </Form.Control>\n                                            <Form.Control.Feedback type=\"invalid\">\n                                                        Please provide a Encounter End Time Threshold.\n                                                    </Form.Control.Feedback>\n                                            </Col>\n                                            </Form.Group>\n\n                                            {this.state.isKarFhirServerURLSelected  ? (\n                                                <Row>\n                                                <Col>\n                                                    <Table responsive=\"lg\" striped bordered hover size=\"sm\" className=\"karsTable\">\n                                                        <tbody>\n                                                            <tr>\n                                                                {/* <th>PlanDefinitionId</th> */}\n                                                                <th>Name</th>\n                                                                <th>Publisher</th>\n                                                                <th>Version</th>\n                                                                <th>Activate</th>\n                                                                <th>Enable Subscriptions</th>\n                                                                <th>Only Covid?</th>\n                                                                <th className=\"outputFormat\">Output Format</th>\n                                                            </tr>\n                                                            {\n                                                                this.state.selectedKARDetails.map(get =>\n                                                                    <tr key={get.karId}>\n                                                                        {/* <td>{get.karId}</td> */}\n                                                                        <td className=\"karTableName\">{get.karName}</td>\n                                                                        <td className=\"karTablePublisher\">{get.karPublisher}</td>\n                                                                        <td>{get.karVersion}</td>\n                                                                        <td className=\"karCheckBoxes\"><Form.Check type=\"checkbox\" name=\"karActive\" onChange={(e) => this.handleCheckboxChange(e, get,\"Activation\")} className=\"tableCheckboxes\" checked={get.isActive}/></td>\n                                                                        <td className=\"karCheckBoxes\"><Form.Check type=\"checkbox\" name=\"karSubscribed\" onChange={(e) => this.handleCheckboxChange(e, get,\"EnableSubscriptions\")} className=\"tableCheckboxes\" checked={get.subscriptionsEnabled}/></td>\n                                                                        <td className=\"karCheckBoxes\"><Form.Check type=\"checkbox\" name=\"covidEnabled\" onChange={(e) => this.handleCheckboxChange(e, get,\"EnableCovidReporting\")} className=\"tableCheckboxes\" checked={get.covidOnly}/></td>\n                                                                        <td>\n                                                                        <Form.Control as=\"select\" size=\"sm\" defaultValue={get.outputFormat} onChange={e=>this.handleOutputFormatChange(e,get)}>\n                                                                            <option>Select Output Format</option>\n                                                                            {this.state.outputFormats.map(option => (\n                                                                                <option key={option} value={option}>\n                                                                                {option}\n                                                                                </option>\n                                                                            ))}\n                                                                        </Form.Control>\n                                                                        </td>\n                                                                    </tr>\n                                                                )\n                                                            }\n                                                        </tbody>\n                                                    </Table> \n                                                </Col>\n                                            </Row>\n                                                ):''}\n                                        </Card.Body>\n                                    </Accordion.Collapse>\n                                </Card>):''}\n                                \n                            </Accordion>\n                            <Row>\n                                <Col className=\"text-center\">\n                                    <Button type=\"submit\">Save</Button>\n                                </Col>\n                            </Row>\n                        </Form>\n                        {/* <Row>\n                            <Col className=\"text-center\">\n                                <button\n                                    className=\"btn btn-primary submitBtn\"\n                                    type=\"button\"\n                                    onClick={e => this.saveClientDetails(e)}\n                                >\n                                    Save\n                                </button>\n                            </Col>\n                        </Row> */}\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n}\n\nexport default HealthCareSettings;\n","/Users/bobd/projects/eCRNow-UI/src/Layout/Header/Header.js",[],"/Users/bobd/projects/eCRNow-UI/src/Views/KAR/KAR.js",["58","59","60","61","62"],"import React, { Component } from 'react';\nimport {\n    Alert,\n    Row,\n    Col,\n    Form, Card, Accordion, Button,Table,OverlayTrigger\n} from 'react-bootstrap';\nimport './KAR.css';\nimport { store } from 'react-notifications-component';\n\nclass KAR extends Component {\n    constructor(props) {\n        super(props);\n        this.state = this.props;\n        this.state = {\n          isSaved:false,\n          validated: false,\n          karRetrieved:false,\n          details:[]\n        }\n\n        this.getKARs = this.getKARs.bind(this);\n        this.openAddNewHealthCareSettings =this.openAddNewHealthCareSettings.bind(this);\n        this.saveKAR = this.saveKAR.bind(this);\n    }\n\n    handleChange(e) {\n      this.setState({\n          [e.target.name]: e.target.value\n      });\n  }\n\n  openAddNewHealthCareSettings() {\n    this.props.history.push('healthCareSettings');\n}\n\n    getKARs() {\n        console.log(\"clicked\");\n        console.log(this.state.fhirServerURL);\n        fetch(this.state.fhirServerURL + \"/PlanDefinition/\", {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(response => {\n                if (response.status === 200) {\n                    return response.json();\n                } else {\n                    const errorMessage = response.json();\n                    console.log(errorMessage);\n                    store.addNotification({\n                        title: '' + response.status + '',\n                        message: 'Error in fetching the PlanDefinitions',\n                        type: 'danger',\n                        insert: 'bottom',\n                        container: 'bottom-right',\n                        animationIn: ['animated', 'fadeIn'],\n                        animationOut: ['animated', 'fadeOut'],\n                        dismiss: {\n                            duration: 5000,\n                            click: true,\n                            onScreen: true\n                        }\n                    });\n                    return;\n                }\n            })\n            .then(result => {\n                console.log(result);\n                if (result) {\n                    console.log(result);\n                    this.setState({\n                      karRetrieved:true\n                    })\n                    this.renderKARTable(result);\n                }\n\n            });\n    }\n\n    renderKARTable(bundle){\n      const tableEntries = [];\n      const bundleEntries = bundle.entry;\n      if(bundleEntries.length>0){\n        for(var i=0; i<bundleEntries.length; i++){\n          const resource = bundleEntries[i].resource;\n          const tableRow = {\n            karId: resource.id?resource.id:\"\",\n            karName: resource.name?resource.name:\"\",\n            karPublisher: resource.publisher?resource.publisher:\"\",\n            karVersion: resource.version?resource.version:\"\"\n          }\n          tableEntries.push(tableRow);\n        }\n      }\n      this.setState({\n        details:tableEntries\n      })\n    }\n\n    saveKAR(){\n      const karObj = {\n        repoName: this.state.repoName,\n        fhirServerURL: this.state.fhirServerURL,\n        kars_info: this.state.details\n      }\n\n      fetch(process.env.REACT_APP_ECR_BASE_URL + \"/api/kar\", {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(karObj)\n    })\n        .then(response => {\n            if (response.status === 200) {\n                this.setState({\n                    isSaved: true\n                });\n                return response.json();\n            } else {\n                const errorMessage = response.json();\n                console.log(errorMessage);\n                store.addNotification({\n                    title: '' + response.status + '',\n                    message: 'Error in Saving the Knowledge Artifact Repositories',\n                    type: 'danger',\n                    insert: 'bottom',\n                    container: 'bottom-right',\n                    animationIn: ['animated', 'fadeIn'],\n                    animationOut: ['animated', 'fadeOut'],\n                    dismiss: {\n                        duration: 5000,\n                        click: true,\n                        onScreen: true\n                    }\n                });\n                return;\n            }\n        })\n        .then(result => {\n            console.log(result);\n            if (result) {\n                this.setState({\n                    fhirServerURL: \"\",\n                    details:[],\n                    karRetrieved:false\n                });\n                store.addNotification({\n                    title: 'Success',\n                    message: 'KAR Details are saved successfully.',\n                    type: 'success',\n                    insert: 'bottom',\n                    container: 'bottom-right',\n                    animationIn: ['animated', 'fadeIn'],\n                    animationOut: ['animated', 'fadeOut'],\n                    dismiss: {\n                        duration: 5000,\n                        click: true,\n                        onScreen: true\n                    }\n                });\n\n            }\n\n        });\n    }\n\n    render() {\n        const setShow = () => this.setState({ isSaved: false });\n\n        const handleSubmit = (event) => {\n            const form = event.currentTarget;\n            if (form.checkValidity() === false) {\n                event.preventDefault();\n                event.stopPropagation();\n            }\n            if (form.checkValidity() === true) {\n                this.saveHealthCareSettings();\n                this.setState({\n                    validated: true\n                });\n                event.preventDefault();\n                event.stopPropagation();\n            }\n\n        };\n        return (\n            <div className=\"healthCareSettings\">\n                <br />\n                <Row>\n                    <Col md=\"6\">\n                        <h2>eCR Specifications/KAR</h2>\n                    </Col>\n                    <Col className=\"addClient\">\n                        <Button onClick={this.openAddNewHealthCareSettings}>Add New HealthCare Settings</Button>\n                    </Col>\n                </Row>\n                <hr />\n                <Row>\n                    <Col>\n                        <Alert\n                            variant=\"success\"\n                            show={this.state.isSaved}\n                            onClose={() => setShow()}\n                            dismissible\n                        >\n                            KAR is saved successfully.\n        </Alert>\n                        <Form >\n                                <Card className=\"accordionCards\">\n                                        <Card.Body className=\"fhirConfiguration\">\n                                        <Form.Group as={Row} controlId=\"formHorizontalClientId\">\n                                                <Form.Label column sm={2}>\n                                                    Repository Name:\n                                                </Form.Label>\n                                                <Col sm={8}>\n                                                    <Form.Control type=\"text\" placeholder=\"Repository Name\" name=\"repoName\" required onChange={e => this.handleChange(e)} value={this.state.repoName} />\n                                                    <Form.Control.Feedback type=\"invalid\">\n                                                        Please provide a Repository Name.\n                                                    </Form.Control.Feedback>\n                                                </Col>\n                                            </Form.Group>\n                                            <Form.Group as={Row} controlId=\"formHorizontalClientId\">\n                                                <Form.Label column sm={2}>\n                                                    FHIR Server URL:\n                                                </Form.Label>\n                                                <Col sm={8}>\n                                                    <Form.Control type=\"text\" placeholder=\"FHIR Server URL\" name=\"fhirServerURL\" required onChange={e => this.handleChange(e)} value={this.state.fhirServerURL} />\n                                                    <Form.Control.Feedback type=\"invalid\">\n                                                        Please provide a FHIR Server URL.\n                                                    </Form.Control.Feedback>\n                                                </Col>\n                                                <Col sm={2}>\n                                                <Button type=\"button\" disabled={this.state.repoName == undefined && this.state.fhirServerURL == undefined} onClick={this.getKARs}>Search KAR</Button>\n                                                </Col>\n                                            </Form.Group>\n                                        </Card.Body>\n                                </Card>\n                                {this.state.karRetrieved  ? (\n                                  <Row>\n                                  <Col>\n                                      <Table responsive=\"lg\" striped bordered hover size=\"sm\">\n                                          <tbody>\n                                              <tr>\n                                                  <th>PlanDefinitionId</th>\n                                                  <th>Name</th>\n                                                  <th>Publisher</th>\n                                                  <th>Version</th>\n                                              </tr>\n                                              {\n                                                  this.state.details.map(get =>\n                                                      <tr key={get.karId}>\n                                                          <td>{get.karId}</td>\n                                                          <td>{get.karName}</td>\n                                                          <td>{get.karPublisher}</td>\n                                                          <td>{get.karVersion}</td>\n                                                      </tr>\n                                                  )\n                                              }\n                                          </tbody>\n                                      </Table>\n                                  </Col>\n                              </Row>\n                                ):''}\n                                \n                                \n                            <Row>\n                                <Col className=\"text-center\">\n                                    <Button type=\"button\" disabled={!this.state.karRetrieved} onClick={this.saveKAR}>Save</Button>\n                                </Col>\n                            </Row>\n                        </Form>\n                        {/* <Row>\n                            <Col className=\"text-center\">\n                                <button\n                                    className=\"btn btn-primary submitBtn\"\n                                    type=\"button\"\n                                    onClick={e => this.saveClientDetails(e)}\n                                >\n                                    Save\n                                </button>\n                            </Col>\n                        </Row> */}\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n}\n\nexport default KAR;\n","/Users/bobd/projects/eCRNow-UI/src/Views/Authorizations/Authorizations.js",[],"/Users/bobd/projects/eCRNow-UI/src/Views/ClientDetailsList/ClientDetailsList.js",[],"/Users/bobd/projects/eCRNow-UI/src/Views/HealthCareSettingsList/HealthCareSettingsList.js",[],"/Users/bobd/projects/eCRNow-UI/src/Views/ClientDetails/ClientDetails.js",[],"/Users/bobd/projects/eCRNow-UI/src/Views/PublicHealthAuthority/PublicHealthAuthority.js",["63","64","65"],"import React, { Component } from 'react';\nimport {\n    Alert,\n    Row,\n    Col,\n    Form, Card, Accordion, Button,Table\n} from 'react-bootstrap';\nimport './PublicHealthAuthority.css';\nimport { store } from 'react-notifications-component';\nimport TextField from '@material-ui/core/TextField/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nclass PublicHealthAuthority extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            validated: false,\n            isValidated:false,\n            isChecked: false,\n        };\n        this.selectedPublicHealthAuthority = this.props.selectedPublicHealthAuthority;\n        console.log(this.props.addNewHealthAuthority);\n        const propType = typeof this.props.addNewHealthAuthority;\n        if(propType === \"boolean\"){\n            this.addNewHealthAuthority = this.props.addNewHealthAuthority ? this.props.addNewHealthAuthority : false;\n        } else {\n            this.addNewHealthAuthority = this.props.addNewHealthAuthority ? this.props.addNewHealthAuthority.addNewHealthAuthority : false;\n        }\n        \n        console.log(this.addNewHealthAuthority);\n        console.log(this.selectedPublicHealthAuthority);\n        if (!this.addNewHealthAuthority && !this.isEmpty(this.selectedPublicHealthAuthority)) {\n          console.log(\"Inside If\")\n            this.state.authType = this.selectedPublicHealthAuthority.authType;\n            this.state.clientId = this.selectedPublicHealthAuthority.clientId;\n            this.state.clientSecret = this.selectedPublicHealthAuthority.clientSecret;\n\n            this.state.username = this.selectedPublicHealthAuthority.username;\n            this.state.password = this.selectedPublicHealthAuthority.password;\n\n            this.state.fhirServerBaseURL = this.selectedPublicHealthAuthority.fhirServerBaseURL;\n            this.state.tokenEndpoint = this.selectedPublicHealthAuthority.tokenUrl;\n            this.state.scopes = this.selectedPublicHealthAuthority.scopes;\n            this.state.restAPIURL= this.selectedPublicHealthAuthority.restApiUrl;\n        } else {\n            this.state.authType = 'SofProvider';\n        }\n        this.state.isSaved = false;\n        this.savePublicHealthAuthority = this.savePublicHealthAuthority.bind(this);\n        this.handleRadioChange = this.handleRadioChange.bind(this);\n        this.handleDirectChange = this.handleDirectChange.bind(this);\n        this.handleReportChange = this.handleReportChange.bind(this);\n        this.openPublicHealthAuthorityList = this.openPublicHealthAuthorityList.bind(this);\n    }\n\n\n    isEmpty(obj) {\n        for (var key in obj) {\n            if (obj.hasOwnProperty(key))\n                return false;\n        }\n        return true;\n    }\n\n    handleChange(e) {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    }\n\n    handleRadioChange(e) {\n        this.setState({\n          authType: e.target.value\n        });\n    }\n\n    handleDirectChange(e) {\n        console.log(e.target.value);\n        this.setState({\n            directType: e.target.value\n        });\n    }\n    handleReportChange(e) {\n        this.setState({\n            reportType: e.target.value\n        });\n    }\n\n\n    handleToggleButton(e) {\n        console.log(e);\n        console.log(e.target.value);\n        if (this.state.isChecked) {\n            this.setState({ isChecked: false, isLoggingEnabled: false });\n        } else {\n            this.setState({ isChecked: true, isLoggingEnabled: true });\n        }\n        console.log(this.state);\n    }\n\n    handleCheckboxChange(e,rowData){\n        console.log(e.target.checked);\n        console.log(rowData);\n    }\n\n    openPublicHealthAuthorityList() {\n        this.props.history.push('PublicHealthAuthorityList');\n    }\n\n    geturl() {\n        var protocol, context, host, strurl;\n        protocol = window.location.protocol;\n        host = window.location.host;\n        //port = window.location.port;\n        context = window.location.pathname.substring(0, window.location.pathname.indexOf(\"/\", 2));\n        strurl = protocol + \"//\" + host + context;\n        return strurl;\n    };\n\n    savePublicHealthAuthority() {\n        console.log(\"save pha\");\n        var requestMethod = '';\n        var PublicHealthAuthority = {\n            authType: this.state.authType,\n            clientId: this.state.clientId,\n            clientSecret: this.state.clientSecret && this.state.authType === 'SofSystem' ? this.state.clientSecret : null,\n            username: this.state.username,\n            password: this.state.password,\n            fhirServerBaseURL: this.state.fhirServerBaseURL,\n            tokenUrl: this.state.tokenEndpoint ? this.state.tokenEndpoint : null,\n            scopes: this.state.scopes,\n            lastUpdated:new Date()\n        };\n        if (!this.addNewHealthAuthority && this.selectedPublicHealthAuthority) {\n          PublicHealthAuthority['id'] = this.selectedPublicHealthAuthority.id;\n            requestMethod = 'PUT';\n        } else {\n            requestMethod = 'POST';\n        }\n        console.log(this.geturl());\n        console.log(JSON.stringify(PublicHealthAuthority));\n        fetch(process.env.REACT_APP_ECR_BASE_URL + \"/api/publicHealthAuthority\", {\n            method: requestMethod,\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(PublicHealthAuthority)\n        })\n            .then(response => {\n                if (response.status === 200) {\n                    this.setState({\n                        isSaved: true\n                    });\n                    return response.json();\n                } else {\n                    const errorMessage = response.json();\n                    console.log(errorMessage);\n                    store.addNotification({\n                        title: '' + response.status + '',\n                        message: 'Error in Saving the HealthAuthority Settings',\n                        type: 'danger',\n                        insert: 'bottom',\n                        container: 'bottom-right',\n                        animationIn: ['animated', 'fadeIn'],\n                        animationOut: ['animated', 'fadeOut'],\n                        dismiss: {\n                            duration: 5000,\n                            click: true,\n                            onScreen: true\n                        }\n                    });\n                    return;\n                }\n            })\n            .then(result => {\n                console.log(result);\n                if (result) {\n                    this.setState({\n                        authType: \"SofProvider\",\n                        clientId: \"\",\n                        clientSecret: \"\",\n                        username: \"\",\n                        password: \"\",\n                        fhirServerBaseURL: \"\",\n                        tokenEndpoint: \"\",\n                        scopes: \"\",\n                        startThreshold: \"\",\n                        endThreshold: \"\",\n                        restAPIURL: \"\"\n                    });\n                    store.addNotification({\n                        title: 'Success',\n                        message: 'Client Details are saved successfully.',\n                        type: 'success',\n                        insert: 'bottom',\n                        container: 'bottom-right',\n                        animationIn: ['animated', 'fadeIn'],\n                        animationOut: ['animated', 'fadeOut'],\n                        dismiss: {\n                            duration: 5000,\n                            click: true,\n                            onScreen: true\n                        }\n                    });\n\n                    this.openPublicHealthAuthorityList();\n                }\n\n            });\n    }\n\n    render() {\n        const setShow = () => this.setState({ isSaved: false });\n\n        const handleSubmit = (event) => {\n            const form = event.currentTarget;\n            if (form.checkValidity() === false) {\n                this.setState({\n                    isValidated: true\n                });\n                event.preventDefault();\n                event.stopPropagation();\n                store.addNotification({\n                    title: 'Warning',\n                    message: 'Please enter all the required fields.',\n                    type: 'warning',\n                    insert: 'bottom',\n                    container: 'bottom-right',\n                    animationIn: ['animated', 'fadeIn'],\n                    animationOut: ['animated', 'fadeOut'],\n                    dismiss: {\n                        duration: 5000,\n                        click: true,\n                        onScreen: true\n                    }\n                });\n                return;\n            }\n            if (form.checkValidity() === true) {\n                this.savePublicHealthAuthority();\n                this.setState({\n                    validated: true\n                });\n                event.preventDefault();\n                event.stopPropagation();\n            }\n\n        };\n        return (\n            <div className=\"PublicHealthAuthority\">\n                <br />\n                <Row>\n                    <Col md=\"6\">\n                        <h2>Public Health Authority</h2>\n                    </Col>\n                    <Col md=\"6\" className=\"clientCol\">\n                        <Button onClick={this.openPublicHealthAuthorityList}>Existing PublicHealthAuthority</Button>\n                    </Col>\n                </Row>\n                <hr />\n                <Row>\n                    <Col>\n                        <Alert\n                            variant=\"success\"\n                            show={this.state.isSaved}\n                            onClose={() => setShow()}\n                            dismissible\n                        >\n                            Public Health Authority are saved successfully.\n        </Alert>\n                        <Form noValidate validated={this.state.validated} onSubmit={handleSubmit} >\n                            <Accordion defaultActiveKey=\"0\">\n                                <Card className=\"accordionCards\">\n                                    <Accordion.Toggle as={Card.Header} eventKey=\"0\">\n                                        FHIR Configuration\n                                    </Accordion.Toggle>\n                                    <Accordion.Collapse eventKey=\"0\">\n                                        <Card.Body className=\"fhirConfiguration\">\n                                            <Form.Group as={Row} controlId=\"formHorizontalClientId\">\n                                                <Form.Label column sm={2}>\n                                                    Launch Type:\n                                                </Form.Label>\n                                                <Col sm={10}>\n                                                    <Row>\n                                                        <Col sm={4}>\n                                                            <Form.Check type=\"radio\" id=\"providerLaunch\">\n                                                                <Form.Check.Input type=\"radio\" checked={this.state.authType === 'SofProvider'} value=\"SofProvider\" name=\"authType\" onChange={e => this.handleRadioChange(e)} />\n                                                                <Form.Check.Label>Provider Launch</Form.Check.Label>\n                                                            </Form.Check>\n                                                        </Col>\n                                                        <Col sm={4}>\n                                                            <Form.Check type=\"radio\" id=\"systemLaunch\">\n                                                                <Form.Check.Input type=\"radio\" checked={this.state.authType === 'SofSystem'} value=\"SofSystem\" onChange={e => this.handleRadioChange(e)} />\n                                                                <Form.Check.Label>System Launch</Form.Check.Label>\n                                                            </Form.Check>\n                                                        </Col>\n                                                    </Row>\n                                                </Col>\n                                            </Form.Group>\n                                            <Form.Group as={Row} controlId=\"formHorizontalClientId\">\n                                                <Form.Label column sm={2}>\n                                                    Client Id:\n                                                </Form.Label>\n                                                <Col sm={10}>\n                                                    <Form.Control type=\"text\" placeholder=\"ClientId\" name=\"clientId\" required onChange={e => this.handleChange(e)} value={this.state.clientId} isInvalid={this.state.isValidated && (this.state.clientId === '' || this.state.clientId === undefined)}/>\n                                                    <Form.Control.Feedback type=\"invalid\">\n                                                        Please provide a Client Id.\n                                                    </Form.Control.Feedback>\n                                                </Col>\n                                            </Form.Group>\n\n                                            {this.state.authType === 'SofSystem' ? (\n                                                <Form.Group as={Row} controlId=\"formHorizontalClientSecret\">\n                                                    <Form.Label column sm={2}>\n                                                        Client Secret:\n                                                    </Form.Label>\n                                                    <Col sm={10}>\n                                                        <Form.Control type=\"text\" placeholder=\"Client Secret\" name=\"clientSecret\" required={this.state.launchType === 'systemLaunch' ? true : false} onChange={e => this.handleChange(e)} value={this.state.clientSecret} isInvalid={this.state.isValidated && (this.state.clientSecret === '' || this.state.clientSecret === undefined)}/>\n                                                        <Form.Control.Feedback type=\"invalid\">\n                                                            Please provide a Client Secret.\n                                                        </Form.Control.Feedback>\n                                                    </Col>\n                                                </Form.Group>\n                                            ) : ''}\n\n\n                                            <Form.Group as={Row} controlId=\"formHorizontalUsername\">\n                                                <Form.Label column sm={2}>\n                                                    Username:\n                                                </Form.Label>\n                                                <Col sm={10}>\n                                                    <Form.Control type=\"text\" placeholder=\"Username\" name=\"username\" onChange={e => this.handleChange(e)} value={this.state.username} />\n                                                    <Form.Control.Feedback type=\"invalid\">\n                                                        Please provide a Username.\n                                                    </Form.Control.Feedback>\n                                                </Col>\n                                            </Form.Group>\n\n\n                                            <Form.Group as={Row} controlId=\"formHorizontalPassword\">\n                                                <Form.Label column sm={2}>\n                                                    Password:\n                                                </Form.Label>\n                                                <Col sm={10}>\n                                                    <Form.Control type=\"password\" placeholder=\"Password\" name=\"password\" onChange={e => this.handleChange(e)} value={this.state.password} />\n                                                    <Form.Control.Feedback type=\"invalid\">\n                                                        Please provide a Password.\n                                                    </Form.Control.Feedback>\n                                                </Col>\n                                            </Form.Group>\n\n                                            <Form.Group as={Row} controlId=\"formHorizontalScopes\">\n                                                <Form.Label column sm={2}>\n                                                    Scopes:\n                                                </Form.Label>\n                                                <Col sm={10}>\n                                                    <Form.Control as=\"textarea\" rows=\"3\" name=\"scopes\" onChange={e => this.handleChange(e)} required value={this.state.scopes} isInvalid={this.state.isValidated && (this.state.scopes === '' || this.state.scopes === undefined)}/>\n                                                    <Form.Control.Feedback type=\"invalid\">\n                                                        Please provide Scopes.\n                                                    </Form.Control.Feedback>\n                                                </Col>\n                                            </Form.Group>\n\n                                            <Form.Group as={Row} controlId=\"formHorizontalFHIRBaseURL\">\n                                                <Form.Label column sm={2}>\n                                                    FHIR Server Base URL:\n                                                </Form.Label>\n                                                <Col sm={10}>\n                                                    <Form.Control type=\"text\" placeholder=\"FHIR Server Base URL\" name=\"fhirServerBaseURL\" required onChange={e => this.handleChange(e)} value={this.state.fhirServerBaseURL} isInvalid={this.state.isValidated && (this.state.fhirServerBaseURL === '' || this.state.fhirServerBaseURL === undefined)}/>\n                                                    <Form.Control.Feedback type=\"invalid\">\n                                                        Please provide a FHIR Server Base URL.\n                                                    </Form.Control.Feedback>\n                                                </Col>\n                                            </Form.Group>\n                                            {this.state.authType === 'SofSystem' ? (\n                                                <Form.Group as={Row} controlId=\"formHorizontalTokenURL\">\n                                                    <Form.Label column sm={2}>\n                                                        Token Endpoint:\n                                                    </Form.Label>\n                                                    <Col sm={10}>\n                                                        <Form.Control type=\"text\" placeholder=\"Token Endpoint\" name=\"tokenEndpoint\" required={this.state.launchType === 'systemLaunch' ? true : false} onChange={e => this.handleChange(e)} value={this.state.tokenEndpoint} />\n\n                                                        <Form.Control.Feedback type=\"invalid\">\n                                                            Please provide a FHIR Server Token URL.\n                                                        </Form.Control.Feedback>\n                                                    </Col>\n                                                </Form.Group>\n                                            ) : ''} \n                                        </Card.Body>\n                                    </Accordion.Collapse>\n                                </Card>\n                                \n                            </Accordion>\n                            <Row>\n                                <Col className=\"text-center\">\n                                    <Button type=\"submit\">Save</Button>\n                                </Col>\n                            </Row>\n                        </Form>\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n}\n\nexport default PublicHealthAuthority;\n",{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":10,"column":8,"nodeType":"72","messageId":"73","endLine":10,"endColumn":17},{"ruleId":"70","severity":1,"message":"74","line":11,"column":8,"nodeType":"72","messageId":"73","endLine":11,"endColumn":16},{"ruleId":"75","severity":1,"message":"76","line":235,"column":24,"nodeType":"77","messageId":"78","endLine":235,"endColumn":26},{"ruleId":"79","severity":1,"message":"80","line":245,"column":32,"nodeType":"81","messageId":"82","endLine":252,"endColumn":14},{"ruleId":"83","severity":1,"message":"84","line":245,"column":33,"nodeType":"81","messageId":"85","endLine":245,"endColumn":35},{"ruleId":"83","severity":1,"message":"84","line":299,"column":47,"nodeType":"81","messageId":"85","endLine":299,"endColumn":49},{"ruleId":"70","severity":1,"message":"86","line":6,"column":17,"nodeType":"72","messageId":"73","endLine":6,"endColumn":26},{"ruleId":"70","severity":1,"message":"87","line":6,"column":41,"nodeType":"72","messageId":"73","endLine":6,"endColumn":55},{"ruleId":"70","severity":1,"message":"88","line":173,"column":15,"nodeType":"72","messageId":"73","endLine":173,"endColumn":27},{"ruleId":"75","severity":1,"message":"76","line":236,"column":101,"nodeType":"77","messageId":"78","endLine":236,"endColumn":103},{"ruleId":"75","severity":1,"message":"76","line":236,"column":142,"nodeType":"77","messageId":"78","endLine":236,"endColumn":144},{"ruleId":"70","severity":1,"message":"89","line":6,"column":35,"nodeType":"72","messageId":"73","endLine":6,"endColumn":40},{"ruleId":"70","severity":1,"message":"71","line":10,"column":8,"nodeType":"72","messageId":"73","endLine":10,"endColumn":17},{"ruleId":"70","severity":1,"message":"74","line":11,"column":8,"nodeType":"72","messageId":"73","endLine":11,"endColumn":16},"no-native-reassign",["90"],"no-negated-in-lhs",["91"],"no-unused-vars","'TextField' is defined but never used.","Identifier","unusedVar","'MenuItem' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'i', 'i', 'i', 'i'.","ArrowFunctionExpression","unsafeRefs","array-callback-return","Array.prototype.filter() expects a return value from arrow function.","expectedInside","'Accordion' is defined but never used.","'OverlayTrigger' is defined but never used.","'handleSubmit' is assigned a value but never used.","'Table' is defined but never used.","no-global-assign","no-unsafe-negation"]